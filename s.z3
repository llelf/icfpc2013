; Automatically generated by SBV. Do not edit.
;(set-option :produce-models true)
(set-logic UFBV)
; --- uninterpreted sorts ---
; --- literal constants ---
(define-fun s_2 () Bool false)
(define-fun s_1 () Bool true)
(define-fun s78 () (_ BitVec 8) #x00)
(define-fun s17 () (_ BitVec 16) #x0000)
(define-fun s19 () (_ BitVec 16) #x0002)
(define-fun s32 () (_ BitVec 16) #x0003)
(define-fun s56 () (_ BitVec 16) #x0001)
(define-fun s57 () (_ BitVec 16) (bvneg #x0001))
; --- skolem constants ---
(declare-fun s0 () (_ BitVec 16))
(declare-fun s1 () (_ BitVec 16))
(declare-fun s2 () (_ BitVec 16))
(declare-fun s3 () (_ BitVec 16))
(declare-fun s4 () (_ BitVec 16))
(declare-fun s5 () (_ BitVec 16))
(declare-fun s6 () (_ BitVec 16))
(declare-fun s7 () (_ BitVec 16))
(declare-fun s8 () (_ BitVec 16))
(declare-fun s9 () (_ BitVec 16))
(declare-fun s10 () (_ BitVec 16))
(declare-fun s11 () (_ BitVec 16))
(declare-fun s12 () (_ BitVec 16))
(declare-fun s13 () (_ BitVec 16))
(declare-fun s14 () (_ BitVec 16))
(declare-fun s15 () (_ BitVec 16))
; --- constant tables ---
; --- skolemized tables ---
(declare-fun table0 ((_ BitVec 8) (_ BitVec 16)) (_ BitVec 16))
(declare-fun table1 ((_ BitVec 8) (_ BitVec 16)) (_ BitVec 16))
(declare-fun table2 ((_ BitVec 8) (_ BitVec 16)) (_ BitVec 16))
(declare-fun table3 ((_ BitVec 8) (_ BitVec 16)) (_ BitVec 16))
(declare-fun table4 ((_ BitVec 8) (_ BitVec 16)) (_ BitVec 16))
; --- arrays ---
; --- uninterpreted constants ---
; --- user given axioms ---
; --- formula ---
(assert (forall ((s16 (_ BitVec 8)))
            (let ((s18 (bvsge s0 s17)))
            (let ((s20 (bvsle s0 s19)))
            (let ((s21 (and s18 s20)))
            (let ((s22 (bvsge s1 s17)))
            (let ((s23 (bvsle s1 s19)))
            (let ((s24 (and s22 s23)))
            (let ((s25 (bvsge s2 s17)))
            (let ((s26 (bvsle s2 s19)))
            (let ((s27 (and s25 s26)))
            (let ((s28 (bvsge s3 s17)))
            (let ((s29 (bvsle s3 s19)))
            (let ((s30 (and s28 s29)))
            (let ((s31 (bvsge s4 s17)))
            (let ((s33 (bvsle s4 s32)))
            (let ((s34 (and s31 s33)))
            (let ((s35 (bvsge s5 s17)))
            (let ((s36 (bvsle s5 s32)))
            (let ((s37 (and s35 s36)))
            (let ((s38 (bvsge s6 s17)))
            (let ((s39 (bvsle s6 s32)))
            (let ((s40 (and s38 s39)))
            (let ((s41 (bvsge s7 s17)))
            (let ((s42 (bvsle s7 s32)))
            (let ((s43 (and s41 s42)))
            (let ((s44 (bvsge s8 s17)))
            (let ((s45 (bvsle s8 s32)))
            (let ((s46 (and s44 s45)))
            (let ((s47 (bvsge s9 s17)))
            (let ((s48 (bvsle s9 s32)))
            (let ((s49 (and s47 s48)))
            (let ((s50 (bvsge s10 s17)))
            (let ((s51 (bvsle s10 s32)))
            (let ((s52 (and s50 s51)))
            (let ((s53 (bvsge s11 s17)))
            (let ((s54 (bvsle s11 s32)))
            (let ((s55 (and s53 s54)))
            (let ((s58 (ite (or (bvslt s4 #x0000) (bvsle #x0004 s4)) s57 (table0 s16 s4))))
            (let ((s59 (ite (or (bvslt s8 #x0000) (bvsle #x0004 s8)) s57 (table0 s16 s8))))
            (let ((s60 (bvadd s58 s59)))
            (let ((s61 (ite (or (bvslt s0 #x0000) (bvsle #x0003 s0)) s57 (table1 s16 s0))))
            (let ((s62 (= (bvcomp s12 s61) #b1)))
            (let ((s63 (ite (or (bvslt s5 #x0000) (bvsle #x0004 s5)) s57 (table0 s16 s5))))
            (let ((s64 (ite (or (bvslt s9 #x0000) (bvsle #x0004 s9)) s57 (table0 s16 s9))))
            (let ((s65 (bvadd s63 s64)))
            (let ((s66 (ite (or (bvslt s1 #x0000) (bvsle #x0003 s1)) s57 (table2 s16 s1))))
            (let ((s67 (= (bvcomp s13 s66) #b1)))
            (let ((s68 (ite (or (bvslt s6 #x0000) (bvsle #x0004 s6)) s57 (table0 s16 s6))))
            (let ((s69 (ite (or (bvslt s10 #x0000) (bvsle #x0004 s10)) s57 (table0 s16 s10))))
            (let ((s70 (bvadd s68 s69)))
            (let ((s71 (ite (or (bvslt s2 #x0000) (bvsle #x0003 s2)) s57 (table3 s16 s2))))
            (let ((s72 (= (bvcomp s14 s71) #b1)))
            (let ((s73 (ite (or (bvslt s7 #x0000) (bvsle #x0004 s7)) s57 (table0 s16 s7))))
            (let ((s74 (ite (or (bvslt s11 #x0000) (bvsle #x0004 s11)) s57 (table0 s16 s11))))
            (let ((s75 (bvadd s73 s74)))
            (let ((s76 (ite (or (bvslt s3 #x0000) (bvsle #x0003 s3)) s57 (table4 s16 s3))))
            (let ((s77 (= (bvcomp s15 s76) #b1)))
            (let ((s79 (bvsgt s16 s78)))
            (and (= (table0 s16 #x0000) s12)
                 (= (table0 s16 #x0001) s13)
                 (= (table0 s16 #x0002) s14)
                 (= (table0 s16 #x0003) s15)
                 (= (table1 s16 #x0001) s56)
                 (= (table1 s16 #x0000) s12)
                 (= (table1 s16 #x0002) s60)
                 (= (table2 s16 #x0001) s56)
                 (= (table2 s16 #x0000) s12)
                 (= (table2 s16 #x0002) s65)
                 (= (table3 s16 #x0001) s56)
                 (= (table3 s16 #x0000) s12)
                 (= (table3 s16 #x0002) s70)
                 (= (table4 s16 #x0001) s56)
                 (= (table4 s16 #x0000) s12)
                 (= (table4 s16 #x0002) s75)
                 (and s21 s24 s27 s30 s34 s37 s40 s43 s46 s49 s52 s55 s62 s67 s72 s77 s79 s_1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
